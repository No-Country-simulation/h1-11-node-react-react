// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Sex {
  M
  F
}

model Role {
  id   String @id @default(uuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User UserRole[]
}

model User {
  id       String @id @default(uuid())
  name     String
  lastName String
  password String
  email    String @unique
  dni      String @unique
  address  String
  phone    String
  province String
  location String

  sex Sex?

  isValidateEmail Boolean    @default(false)
  isActive        Boolean    @default(true)
  roles           UserRole[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Doctor    Doctor?
  Patient   Patient?

  @@index([isActive])
}

model UserRole {
  userId String
  roleId String

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model Patient {
  id          String    @id @default(uuid())
  birthdate   DateTime?
  bloodFactor String

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user          User            @relation(fields: [userId], references: [id])
  userId        String          @unique
  DoctorPatient DoctorPatient[]

  @@index([isActive])
}

model DoctorPatient {
  patient   Patient @relation(fields: [patientId], references: [id])
  doctor    Doctor  @relation(fields: [doctorId], references: [id])
  patientId String
  doctorId  String

  @@id([patientId, doctorId])
}

model Doctor {
  id          String @id @default(uuid())
  especiality String
  license     String

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user          User            @relation(fields: [userId], references: [id])
  userId        String          @unique
  DoctorPatient DoctorPatient[]

  @@index([isActive])
}

enum AppointmentState {
  PENDIENTE
  CONFIRMADA
  CANCELADA
  COMPLETADA
  NO_ASISTIDA
  REPROGRAMADA
}

model Appointment {
  id          String    @id @default(uuid())
  patientId   String
  doctorId    String
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  description String
  state       AppointmentState  @default(PENDIENTE)
  isActive    Boolean @default(true)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([patientId, doctorId, date])
  @@unique([date, startTime, endTime])
}
